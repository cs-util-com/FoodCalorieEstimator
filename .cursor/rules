# Cursor Agent Rules for TemplateJs

## Project Overview
This is a minimal single-page web app template for rapid prototyping with AI-assisted development.

## Core Principles
- Test-driven development with 100% coverage
- Quality gates must always pass
- Incremental, focused commits
- Follow existing code patterns

## Development Workflow
1. Analyze requirements thoroughly
2. Write tests first (TDD approach)
3. Implement incrementally
4. Validate continuously with `npm run test:watch`
5. Run quality checks before committing: `npm run check:all`
6. Complete validation: `npm run validate:all`

## Code Standards
- Use ES6+ JavaScript features
- Follow existing file structure in src/
- Add JSDoc comments for public APIs
- Maintain modular, testable code
- No code duplication
- No circular dependencies

## Testing Requirements
- Unit tests for all functionality (*.test.js)
- Property-based tests for complex logic (*.property.test.js)
- 100% code coverage required
- Mutation testing >80% score
- All tests must be deterministic

## File Structure Rules
```
src/
├── index.js              # Main entry point
├── components/           # Reusable components
│   ├── *.js             # Implementation
│   ├── *.test.js        # Unit tests  
│   └── *.property.test.js # Property tests
└── utils/               # Utility functions
    ├── *.js             # Implementation
    ├── *.test.js        # Unit tests
    └── *.property.test.js # Property tests
```

## Error Handling Strategy
- When encountering test failures, fix one issue at a time
- Start with the simplest fixes first
- Make minimal, focused changes
- Verify each fix immediately
- Never skip quality checks

## Commit Guidelines
- Small, atomic commits
- Clear, descriptive messages
- Reference issue numbers
- Include test results in commit messages when relevant

## Quality Gates (Must Pass)
- `npm test` - All tests pass with 100% coverage
- `npm run lint` - No linting errors
- `npm run check:dup` - No code duplication
- `npm run check:cycles` - No circular dependencies  
- `npm run check:boundaries` - Architectural boundaries respected
- `npm run mutation` - Mutation testing >80% score

## Branch Strategy
- Create feature branches: `agent/<issue-number>-<description>`
- Reference original issue in all commits
- Open PR when implementation is complete
- Ensure all quality gates pass before PR

## Common Commands
```bash
npm test                 # Run tests with coverage
npm run test:watch      # Continuous testing
npm run check:all       # All quality checks
npm run validate:all    # Complete validation
npm run lint            # Linting only
npm run mutation        # Mutation testing
```

Remember: Quality over speed. Take time to do it right.
